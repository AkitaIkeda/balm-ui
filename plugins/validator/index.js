!function(t,e){"object"===typeof exports&&"object"===typeof module?module.exports=e(require("vue")):"function"===typeof define&&define.amd?define("$validator",["vue"],e):"object"===typeof exports?exports.$validator=e(require("vue")):t.$validator=e(t.Vue)}("undefined"!==typeof self?self:this,(function(t){return function(){"use strict";var e={895:function(e){e.exports=t}},i={};function s(t){var a=i[t];if(void 0!==a)return a.exports;var n=i[t]={exports:{}};return e[t](n,n.exports,s),n.exports}s.d=function(t,e){for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var a={};return function(){s.r(a),s.d(a,{default:function(){return u},install:function(){return d},useValidator:function(){return c}});var t=s(895);const e=/(?:^\[object\s(.*?)\]$)/;var i=t=>Object.prototype.toString.call(t).replace(e,"$1").toLowerCase();const n={required:{validate:t=>t&&t.length>0,message:"%s is required"}};let o={};function r(t,e){console.warn("[$validator]","The '".concat(t,"' has been deprecated. Use the '").concat(e,"' instead"))}class l{constructor(){const e=(0,t.getCurrentInstance)();this.instance=e,this.validations=[],this.customValidations=[]}validate(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],s={valid:!0,validFields:[],invalidFields:[],messages:[],message:"",validMsg:{}},a=[];if(this.instance){const{setupState:t,data:e}=this.instance;a=t.validations||e.validations||[]}if(this.validations=this.customValidations.length?this.customValidations:a,!Array.isArray(this.validations))throw new Error("[$validator]: validations must be an array in 10.7.0");for(let n=0,r=this.validations.length;n<r;n++){const a=this.validations[n],{key:r,label:l,validator:d}=a,c=r;if(!e.length||e.includes(c)){const e=l||c,n=d.split(",").map((t=>t.trim()));let r=!0;for(let l=0,d=n.length;l<d;l++){let d=n[l],u=a[d],v="object"===i(u)?u:o[d];if(v&&"function"===i(v.validate)){let a=[t[c],t];if(!v.validate(...a)){r=!1;let t="";switch(i(v.message)){case"string":t=v.message.replace("%s",e);break;case"function":t=v.message(...a);break;default:console.warn("[$validator]","'".concat(c,".message' must be a string or function"))}t&&s.messages.push(t);break}}else console.warn("[$validator]","The field '".concat(c,"' is missing a validation rule: '").concat(d,"'"))}r?s.validFields.push(c):s.invalidFields.push(c)}}return s.messages.length&&(s.valid=!1,s.message=s.messages[0],s.invalidFields.forEach(((t,e)=>{s.validMsg[t]=s.messages[e]}))),s.validFields.forEach((t=>{s.validMsg[t]=""})),s}resetValidations(){r("resetValidations","clear")}setValidations(){r("setValidations","set")}clear(){this.customValidations=[]}get(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return t?this.customValidations.find((e=>{let{key:i}=e;return i===t})):this.customValidations}set(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t))this.customValidations=t;else{const i=this.customValidations.findIndex((e=>{let{key:i}=e;return i===t}));~i?this.customValidations[i]=Object.assign({},e):this.customValidations=[Object.assign({key:t},e)]}}}function d(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o=Object.assign({},n,e);const i=new l;t.config.globalProperties.$validator=i,t.provide("validator",i)}const c=()=>new l;var u={install:d}}(),a}()}));